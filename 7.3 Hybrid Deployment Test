Step 1 Create a working directory.
[root@k8smaster1 ~]# mkdir rubik
[root@k8smaster1 ~]# cd rubik
[root@k8smaster1 rubik]#
Step 2 Compile a test script.
[root@k8smaster1 rubik]# vim rubik_demo.sh
#!/bin/bash
with_offline=${1:-no_offline}
enable_isolation=${2:-no_isolation}
stress_num=${3:-10}
concurrency=10
timeout=30
output=/tmp/result.json
online_container=
offline_container=
exec_sql="echo \"SELECT * FROM system.numbers LIMIT 10000000 OFFSET 10000000\" | clickhousebenchmark -i 10000 -c $concurrency -t $timeout"
function prepare()
{
 echo "Launch clickhouse container."
 online_container=$(docker run -itd \
 -v /tmp:/tmp:rw \
 --ulimit nofile=262144:262144 \
 -p 34424:34424 \
 yandex/clickhouse-server)
 sleep 3
 echo "Clickhouse container lauched."
}
function clickhouse()
{
 echo "Start clickhouse benchmark test."
 docker exec $online_container bash -c "$exec_sql --json $output"
 echo "Clickhouse benchmark test done."
}
function stress()
{
 echo "Launch stress container."
 offline_container=$(docker run -itd joedval/stress --cpu $stress_num)
 echo "Stress container launched."
 if [ $enable_isolation == "enable_isolation" ]; then
 echo "Set stress container qos level to -1."
 echo -1 > /sys/fs/cgroup/cpu/system.slice/docker-$offline_container.scope/cpu.qos_level
 fi
}
function benchmark()
{
 if [ $with_offline == "with_offline" ]; then
 stress
 sleep 3
fi
 clickhouse
 echo "Remove test containers."
 docker rm -f $online_container
 docker rm -f $offline_container
 echo "Finish benchmark test for clickhouse(online) and stress(offline) colocation."
 echo "===============================clickhouse
benchmark=================================================="
 cat $output
 echo "===============================clickhouse
benchmark=================================================="
}
prepare
benchmark

Step 3 Test the online service.
The no_offline parameter indicates that the offline Stress service is disabled, and the
no_isolation parameter indicates that the isolation function for hybrid deployed services
is disabled.
[root@k8smaster1 rubik]# sh rubik_demo.sh no_offline no_isolation
Do not interrupt the execution until the result in the screenshot is automatically printed


Step 4 Test the offline service.
The with_offline parameter indicates that the offline Stress service is enabled, and the
no_isolation parameter indicates that the isolation function for hybrid deployed services
is disabled.
[root@k8smaster1 rubik]# sh rubik_demo.sh with_offline no_isolation
Do not interrupt the execution until the result in the screenshot is automatically printed.


Step 5 Enable the isolation function for hybrid deployed services.
The with_offline parameter indicates that the offline Stress service is enabled, and the
enable_isolation parameter indicates that the isolation function for hybrid deployed
services is enabled.
[root@k8smaster1 rubik]# sh rubik_demo.sh with_offline enable_isolation
Do not interrupt the execution until the result in the screenshot is automatically printed.

When the isolation function for hybrid deployed services is disabled, the QPS of
ClickHouse decreases from approximately 1.2 to 0.6, the service response delay (P90)
increases from approximately 1.0s to 1.9s, and the QoS decreases by about 50%. When
the isolation function for hybrid deployed services is enabled, the QPS and response delay
(P50/P90/P99) of ClickHouse decrease by less than 2% compared with the baseline, and
the QoS remains unchanged.

